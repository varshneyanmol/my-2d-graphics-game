package com.rain;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import com.rain.entity.mob.Player;
import com.rain.graphics.Screen;
import com.rain.input.Keyboard;
import com.rain.level.Level;
import com.rain.level.RandomLevel;

public class Game extends Canvas implements Runnable {

	public static int width = 300;
	public static int height = width / 16 * 9;
	public int scale = 3;

	private Thread thread;
	private Keyboard key;
	private Level level;
	private Player player;
	private boolean running = false;

	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();

	private Screen screen;

	public Game() {
		Dimension size = new Dimension(width * scale, height * scale);
		this.setPreferredSize(size);

		screen = new Screen(width, height);
		key = new Keyboard();
		level = new RandomLevel(64, 64);
		player = new Player(key);
		this.addKeyListener(key);
	}

	public synchronized void start() {
		running = true;
		thread = new Thread(this, "Display");
		thread.start();
	}

	public synchronized void stop() {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void run() {

		long lastTime = System.nanoTime();
		final double divisions = 1000000000.0 / 60.0;
		double delta = 0;

		long timer = System.currentTimeMillis();
		int updatesCounter = 0;
		int framesCounter = 0;

		requestFocus(); // this is done to set focus to the canvas. If we run the program, then by default, although JFrame comes in focus
						// but we had
						// to set focus to the canvas by clicking in it. So, this requestFocus() method does this for you.

		while (running) {

			long currentTime = System.nanoTime();
			delta += (currentTime - lastTime) / divisions; // [ (currentTime - lastTime) / (1000000000) ] this gives us the difference of
															// two times in
															// seconds(let say 'ds'). and this ds then is being
															// multiplied by 60(or whatever times we want to run our update() method in 1
															// second), so
															// by this calculation we will achieve delta = 1, 60
															// times faster. And so in 1 sec, the condition if(delta>=1) will be true 60
															// times.

			lastTime = currentTime;

			if (delta >= 1) {
				update();
				delta--;
				updatesCounter++;
			}

			render();
			framesCounter++;

			if ((System.currentTimeMillis() - timer) >= 1000) {
				timer += 1000;
				Main.window.setTitle("learing to make a game   |   " + updatesCounter + " ups,  " + framesCounter + " fps");
				framesCounter = 0;
				updatesCounter = 0;
			}
		}
	}

	private void render() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}

		screen.clear();
		level.render(player.x, player.y, screen);
		player.render(screen);

		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = screen.pixels[i];
		}

		Graphics g = bs.getDrawGraphics();

		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
		// g.setColor(Color.WHITE);
		// g.setFont(new Font("Arial", 0, 40));

		g.dispose();
		bs.show();
	}

	private void update() {

		key.update();
		player.update();
	}
}
